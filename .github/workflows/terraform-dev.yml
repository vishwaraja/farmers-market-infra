# =============================================================================
# TERRAFORM DEV ENVIRONMENT CI/CD
# =============================================================================
# This workflow automatically deploys changes to the dev environment
# Triggers: Push to dev branch, PR to dev branch

name: 🚀 Terraform Dev Environment

on:
  push:
    branches: [dev]
    paths:
      - 'environments/dev/**'
      - 'modules/**'
      - 'shared/**'
  pull_request:
    branches: [dev]
    paths:
      - 'environments/dev/**'
      - 'modules/**'
      - 'shared/**'

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: 'dev'

jobs:
  # =============================================================================
  # VALIDATION JOB
  # =============================================================================
  validate:
    name: 🟢 [VALIDATE] Terraform Validation & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🔍 Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: 🔧 Terraform Init
      run: terraform init
      working-directory: environments/dev
      
    - name: ✅ Terraform Validate
      run: terraform validate
      working-directory: environments/dev
      
    - name: 🔍 Check Bypass Flags
      id: bypass
      run: |
        # Check commit message for bypass flags
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        echo "Commit message: $COMMIT_MSG"
        
        # Check for bypass flags in commit message
        if echo "$COMMIT_MSG" | grep -qi "\[skip-tflint\]"; then
          echo "skip_tflint=true" >> $GITHUB_OUTPUT
          echo "🔄 TFLint bypassed via commit message"
        else
          echo "skip_tflint=false" >> $GITHUB_OUTPUT
        fi
        
        if echo "$COMMIT_MSG" | grep -qi "\[skip-checkov\]"; then
          echo "skip_checkov=true" >> $GITHUB_OUTPUT
          echo "🔄 Checkov bypassed via commit message"
        else
          echo "skip_checkov=false" >> $GITHUB_OUTPUT
        fi
        
        if echo "$COMMIT_MSG" | grep -qi "\[skip-validation\]"; then
          echo "skip_tflint=true" >> $GITHUB_OUTPUT
          echo "skip_checkov=true" >> $GITHUB_OUTPUT
          echo "🔄 All validation bypassed via commit message"
        fi
        
        # Check workflow dispatch inputs
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if [ "${{ inputs.skip_tflint }}" = "true" ]; then
            echo "skip_tflint=true" >> $GITHUB_OUTPUT
            echo "🔄 TFLint bypassed via workflow dispatch"
          fi
          
          if [ "${{ inputs.skip_checkov }}" = "true" ]; then
            echo "skip_checkov=true" >> $GITHUB_OUTPUT
            echo "🔄 Checkov bypassed via workflow dispatch"
          fi
          
          if [ "${{ inputs.skip_all_validation }}" = "true" ]; then
            echo "skip_tflint=true" >> $GITHUB_OUTPUT
            echo "skip_checkov=true" >> $GITHUB_OUTPUT
            echo "🔄 All validation bypassed via workflow dispatch"
          fi
        fi
        
        # Display bypass status
        echo "Bypass Status:"
        echo "  TFLint: ${{ steps.bypass.outputs.skip_tflint }}"
        echo "  Checkov: ${{ steps.bypass.outputs.skip_checkov }}"
        
    - name: 🔧 TFLint Setup
      if: steps.bypass.outputs.skip_tflint != 'true'
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest
        
    - name: 🔍 Run TFLint
      if: steps.bypass.outputs.skip_tflint != 'true'
      run: tflint
      working-directory: environments/dev
      
    - name: ⏭️ Skip TFLint (Bypassed)
      if: steps.bypass.outputs.skip_tflint == 'true'
      run: |
        echo "🔄 TFLint validation skipped"
        echo "⚠️  WARNING: TFLint validation was bypassed"
        echo "   This means security and best practice checks were not performed"
        
    - name: 🔒 Checkov Security Scan
      if: steps.bypass.outputs.skip_checkov != 'true'
      uses: bridgecrewio/checkov-action@master
      with:
        directory: environments/dev
        framework: terraform
        output_format: sarif
        output_file_path: checkov.sarif
        
    - name: 📤 Upload Checkov Results
      if: steps.bypass.outputs.skip_checkov != 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif
        
    - name: ⏭️ Skip Checkov (Bypassed)
      if: steps.bypass.outputs.skip_checkov == 'true'
      run: |
        echo "🔄 Checkov security scan skipped"
        echo "⚠️  WARNING: Checkov security scan was bypassed"
        echo "   This means security vulnerability checks were not performed"

  # =============================================================================
  # PLAN JOB
  # =============================================================================
  plan:
    name: 🟢 [PLAN] Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🔧 Terraform Init
      run: terraform init
      working-directory: environments/dev
      
    - name: 📋 Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: environments/dev
      
    - name: 📤 Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-dev
        path: environments/dev/tfplan
        retention-days: 1

  # =============================================================================
  # APPLY JOB (Auto-deploy to dev)
  # =============================================================================
  apply:
    name: 🟢 [APPLY] Terraform Apply
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    environment: development
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 📥 Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-dev
        path: environments/dev
        
    - name: 🔧 Terraform Init
      run: terraform init
      working-directory: environments/dev
      
    - name: 🚀 Terraform Apply
      run: terraform apply tfplan
      working-directory: environments/dev
      
    - name: 📊 Get Outputs
      id: outputs
      run: |
        echo "kong_proxy_url=$(terraform output -raw kong_proxy_url)" >> $GITHUB_OUTPUT
        echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
        echo "storage_bucket_name=$(terraform output -raw storage_bucket_name)" >> $GITHUB_OUTPUT
      working-directory: environments/dev
      
    - name: 🧪 Test Infrastructure
      run: |
        echo "🧪 Testing deployed infrastructure..."
        
        # Wait for resources to be ready
        sleep 30
        
        # Test Kong API Gateway
        echo "Testing Kong API Gateway..."
        curl -f "${{ steps.outputs.outputs.kong_proxy_url }}/status" || {
          echo "❌ Kong health check failed"
          exit 1
        }
        echo "✅ Kong is healthy"
        
        # Test EKS cluster
        echo "Testing EKS cluster..."
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.outputs.outputs.eks_cluster_name }}
        kubectl get nodes || {
          echo "❌ EKS cluster test failed"
          exit 1
        }
        echo "✅ EKS cluster is healthy"
        
        # Test S3 bucket
        echo "Testing S3 bucket..."
        aws s3 ls "s3://${{ steps.outputs.outputs.storage_bucket_name }}" || {
          echo "❌ S3 bucket test failed"
          exit 1
        }
        echo "✅ S3 bucket is accessible"
        
        echo "🎉 All infrastructure tests passed!"
      working-directory: environments/dev
      
    - name: 📢 Notify Success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#terraform-changes'
        text: |
          🚀 **Dev Environment Deployed Successfully**
          
          **Environment:** dev
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Kong URL:** ${{ steps.outputs.outputs.kong_proxy_url }}
          
          All infrastructure tests passed! ✅
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: 📢 Notify Failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#terraform-changes'
        text: |
          ❌ **Dev Environment Deployment Failed**
          
          **Environment:** dev
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          Check the logs for details.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # PR COMMENT JOB
  # =============================================================================
  pr-comment:
    name: 🟢 [COMMENT] Comment PR
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-dev
        path: environments/dev
        
    - name: 📊 Generate Plan Output
      id: plan-output
      run: |
        cd environments/dev
        terraform init
        terraform show tfplan > plan.txt
        echo "plan_output<<EOF" >> $GITHUB_OUTPUT
        cat plan.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: 💬 Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const planOutput = `${{ steps.plan-output.outputs.plan_output }}`;
          
          const comment = `## 🚀 Terraform Plan Results - Dev Environment
          
          <details>
          <summary>Click to expand plan output</summary>
          
          \`\`\`hcl
          ${planOutput}
          \`\`\`
          
          </details>
          
          **Validation:** ✅ Passed
          **Security Scan:** ✅ Passed
          **Plan:** ✅ Generated
          
          This plan will be automatically applied when merged to the \`dev\` branch.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
