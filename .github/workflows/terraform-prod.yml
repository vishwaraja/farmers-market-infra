# =============================================================================
# TERRAFORM PRODUCTION ENVIRONMENT CI/CD
# =============================================================================
# This workflow deploys changes to production with manual approval
# Triggers: Push to main branch

name: 🟢 [PRODUCTION] Terraform Production Environment

on:
  push:
    branches: [main]
    paths:
      - 'environments/production/**'
      - 'modules/**'
      - 'shared/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: 'production'

jobs:
  # =============================================================================
  # VALIDATION JOB
  # =============================================================================
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      run: terraform init
      working-directory: environments/production
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: environments/production
      
    - name: TFLint Setup
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest
        
    - name: Run TFLint
      run: tflint
      working-directory: environments/production
      
    - name: Checkov Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: environments/production
        framework: terraform
        output_format: sarif
        output_file_path: checkov.sarif
        
    - name: Upload Checkov Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif

  # =============================================================================
  # PLAN JOB
  # =============================================================================
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      working-directory: environments/production
      
    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: environments/production
      
    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-prod
        path: environments/production/tfplan
        retention-days: 7

  # =============================================================================
  # COST ESTIMATION JOB
  # =============================================================================
  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: plan
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Infracost Setup
      uses: infracost/infracost-gh-action@v0.10
      with:
        api_key: ${{ secrets.INFRACOST_API_KEY }}
        
    - name: Generate Infracost Report
      run: |
        infracost breakdown --path=environments/production \
          --format=json --out-file=infracost.json
        infracost comment github --path=infracost.json \
          --repo=${{ github.repository }} \
          --github-token=${{ secrets.GITHUB_TOKEN }} \
          --pull-request=${{ github.event.pull_request.number || 0 }} \
          --behavior=update

  # =============================================================================
  # MANUAL APPROVAL JOB
  # =============================================================================
  approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: [validate, plan, cost-estimation]
    environment: production  # This requires manual approval in GitHub
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-prod
        path: environments/production
        
    - name: Generate Plan Summary
      id: plan-summary
      run: |
        cd environments/production
        terraform init
        terraform show tfplan > plan.txt
        
        # Extract resource changes
        ADD=$(grep -c "will be created" plan.txt || echo "0")
        CHANGE=$(grep -c "will be updated" plan.txt || echo "0")
        DESTROY=$(grep -c "will be destroyed" plan.txt || echo "0")
        
        echo "add_count=$ADD" >> $GITHUB_OUTPUT
        echo "change_count=$CHANGE" >> $GITHUB_OUTPUT
        echo "destroy_count=$DESTROY" >> $GITHUB_OUTPUT
        
        # Create summary
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "📊 **Plan Summary:**" >> $GITHUB_OUTPUT
        echo "- Resources to be created: $ADD" >> $GITHUB_OUTPUT
        echo "- Resources to be updated: $CHANGE" >> $GITHUB_OUTPUT
        echo "- Resources to be destroyed: $DESTROY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: Display Plan Summary
      run: |
        echo "${{ steps.plan-summary.outputs.summary }}"
        echo ""
        echo "🔍 **Full Plan Details:**"
        cat environments/production/plan.txt
      
    - name: Notify Approval Required
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        channel: '#terraform-changes'
        text: |
          🔔 **Production Deployment Approval Required**
          
          **Environment:** production
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ${{ steps.plan-summary.outputs.summary }}
          
          Please review and approve the deployment in GitHub.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # APPLY JOB (Manual approval required)
  # =============================================================================
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [validate, plan, cost-estimation, approval]
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-prod
        path: environments/production
        
    - name: Terraform Init
      run: terraform init
      working-directory: environments/production
      
    - name: Terraform Apply
      run: terraform apply tfplan
      working-directory: environments/production
      
    - name: Get Outputs
      id: outputs
      run: |
        echo "kong_proxy_url=$(terraform output -raw kong_proxy_url)" >> $GITHUB_OUTPUT
        echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
        echo "storage_bucket_name=$(terraform output -raw storage_bucket_name)" >> $GITHUB_OUTPUT
      working-directory: environments/production
      
    - name: Test Infrastructure
      run: |
        echo "🧪 Testing production infrastructure..."
        
        # Wait for resources to be ready
        sleep 60
        
        # Test Kong API Gateway
        echo "Testing Kong API Gateway..."
        curl -f "${{ steps.outputs.outputs.kong_proxy_url }}/status" || {
          echo "❌ Kong health check failed"
          exit 1
        }
        echo "✅ Kong is healthy"
        
        # Test EKS cluster
        echo "Testing EKS cluster..."
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.outputs.outputs.eks_cluster_name }}
        kubectl get nodes || {
          echo "❌ EKS cluster test failed"
          exit 1
        }
        echo "✅ EKS cluster is healthy"
        
        # Test S3 bucket
        echo "Testing S3 bucket..."
        aws s3 ls "s3://${{ steps.outputs.outputs.storage_bucket_name }}" || {
          echo "❌ S3 bucket test failed"
          exit 1
        }
        echo "✅ S3 bucket is accessible"
        
        echo "🎉 All production infrastructure tests passed!"
      working-directory: environments/production
      
    - name: Notify Success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#terraform-changes'
        text: |
          🚀 **Production Environment Deployed Successfully**
          
          **Environment:** production
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Kong URL:** ${{ steps.outputs.outputs.kong_proxy_url }}
          
          All infrastructure tests passed! ✅
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Notify Failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#terraform-changes'
        text: |
          ❌ **Production Environment Deployment Failed**
          
          **Environment:** production
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          Check the logs for details. Consider rollback if necessary.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # ROLLBACK JOB (Manual trigger)
  # =============================================================================
  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      working-directory: environments/production
      
    - name: Terraform Rollback
      run: |
        echo "🔄 Rolling back to previous state..."
        terraform destroy -auto-approve
      working-directory: environments/production
      
    - name: Notify Rollback
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        channel: '#terraform-changes'
        text: |
          ⚠️ **Production Rollback Executed**
          
          **Environment:** production
          **Reason:** Deployment failure
          **Time:** $(date)
          
          Infrastructure has been rolled back to previous state.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
