# =============================================================================
# TERRAFORM STAGING ENVIRONMENT CI/CD
# =============================================================================
# This workflow automatically deploys changes to staging
# Triggers: Push to staging branch

name: 🚀 Terraform Staging Environment

on:
  push:
    branches: [staging]
    paths:
      - 'environments/staging/**'
      - 'modules/**'
      - 'shared/**'
  pull_request:
    branches: [staging]
    paths:
      - 'environments/staging/**'
      - 'modules/**'
      - 'shared/**'

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: 'staging'

jobs:
  # =============================================================================
  # VALIDATION JOB
  # =============================================================================
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      run: terraform init
      working-directory: environments/staging
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: environments/staging
      
    - name: TFLint Setup
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest
        
    - name: Run TFLint
      run: tflint
      working-directory: environments/staging
      
    - name: Checkov Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: environments/staging
        framework: terraform
        output_format: sarif
        output_file_path: checkov.sarif
        
    - name: Upload Checkov Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif

  # =============================================================================
  # PLAN JOB
  # =============================================================================
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      working-directory: environments/staging
      
    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: environments/staging
      
    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-staging
        path: environments/staging/tfplan
        retention-days: 3

  # =============================================================================
  # APPLY JOB (Auto-deploy to staging)
  # =============================================================================
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-staging
        path: environments/staging
        
    - name: Terraform Init
      run: terraform init
      working-directory: environments/staging
      
    - name: Terraform Apply
      run: terraform apply tfplan
      working-directory: environments/staging
      
    - name: Get Outputs
      id: outputs
      run: |
        echo "kong_proxy_url=$(terraform output -raw kong_proxy_url)" >> $GITHUB_OUTPUT
        echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
        echo "storage_bucket_name=$(terraform output -raw storage_bucket_name)" >> $GITHUB_OUTPUT
      working-directory: environments/staging
      
    - name: Test Infrastructure
      run: |
        echo "🧪 Testing staging infrastructure..."
        
        # Wait for resources to be ready
        sleep 45
        
        # Test Kong API Gateway
        echo "Testing Kong API Gateway..."
        curl -f "${{ steps.outputs.outputs.kong_proxy_url }}/status" || {
          echo "❌ Kong health check failed"
          exit 1
        }
        echo "✅ Kong is healthy"
        
        # Test EKS cluster
        echo "Testing EKS cluster..."
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.outputs.outputs.eks_cluster_name }}
        kubectl get nodes || {
          echo "❌ EKS cluster test failed"
          exit 1
        }
        echo "✅ EKS cluster is healthy"
        
        # Test S3 bucket
        echo "Testing S3 bucket..."
        aws s3 ls "s3://${{ steps.outputs.outputs.storage_bucket_name }}" || {
          echo "❌ S3 bucket test failed"
          exit 1
        }
        echo "✅ S3 bucket is accessible"
        
        echo "🎉 All staging infrastructure tests passed!"
      working-directory: environments/staging
      
    - name: Notify Success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#terraform-changes'
        text: |
          🚀 **Staging Environment Deployed Successfully**
          
          **Environment:** staging
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Kong URL:** ${{ steps.outputs.outputs.kong_proxy_url }}
          
          All infrastructure tests passed! ✅
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Notify Failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#terraform-changes'
        text: |
          ❌ **Staging Environment Deployment Failed**
          
          **Environment:** staging
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          Check the logs for details.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # PR COMMENT JOB
  # =============================================================================
  pr-comment:
    name: Comment PR
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-staging
        path: environments/staging
        
    - name: Generate Plan Output
      id: plan-output
      run: |
        cd environments/staging
        terraform init
        terraform show tfplan > plan.txt
        echo "plan_output<<EOF" >> $GITHUB_OUTPUT
        cat plan.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const planOutput = `${{ steps.plan-output.outputs.plan_output }}`;
          
          const comment = `## 🚀 Terraform Plan Results - Staging Environment
          
          <details>
          <summary>Click to expand plan output</summary>
          
          \`\`\`hcl
          ${planOutput}
          \`\`\`
          
          </details>
          
          **Validation:** ✅ Passed
          **Security Scan:** ✅ Passed
          **Plan:** ✅ Generated
          
          This plan will be automatically applied when merged to the \`staging\` branch.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
