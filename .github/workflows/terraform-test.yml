# =============================================================================
# TERRAFORM TESTING WORKFLOW
# =============================================================================
# This workflow runs comprehensive tests on Terraform code
# Triggers: Push to any branch, Pull requests

name: 🟢 [TESTING] Terraform Testing

on:
  push:
    branches: ['**']
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'shared/**'
  pull_request:
    branches: ['**']
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'shared/**'

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  # =============================================================================
  # STATIC ANALYSIS JOB
  # =============================================================================
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init (Dev)
      run: terraform init
      working-directory: environments/dev
      
    - name: Terraform Validate (Dev)
      run: terraform validate
      working-directory: environments/dev
      
    - name: Terraform Init (Staging)
      run: terraform init
      working-directory: environments/staging
      
    - name: Terraform Validate (Staging)
      run: terraform validate
      working-directory: environments/staging
      
    - name: Terraform Init (Production)
      run: terraform init
      working-directory: environments/production
      
    - name: Terraform Validate (Production)
      run: terraform validate
      working-directory: environments/production

  # =============================================================================
  # LINTING JOB
  # =============================================================================
  linting:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: TFLint Setup
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest
        
    - name: Run TFLint (Dev)
      run: tflint
      working-directory: environments/dev
      
    - name: Run TFLint (Staging)
      run: tflint
      working-directory: environments/staging
      
    - name: Run TFLint (Production)
      run: tflint
      working-directory: environments/production

  # =============================================================================
  # SECURITY SCANNING JOB
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Checkov Security Scan (Dev)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: environments/dev
        framework: terraform
        output_format: sarif
        output_file_path: checkov-dev.sarif
        
    - name: Checkov Security Scan (Staging)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: environments/staging
        framework: terraform
        output_format: sarif
        output_file_path: checkov-staging.sarif
        
    - name: Checkov Security Scan (Production)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: environments/production
        framework: terraform
        output_format: sarif
        output_file_path: checkov-prod.sarif
        
    - name: Upload Checkov Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-dev.sarif
        
    - name: Upload Checkov Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-staging.sarif
        
    - name: Upload Checkov Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-prod.sarif

  # =============================================================================
  # COST ESTIMATION JOB
  # =============================================================================
  cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Infracost Setup
      uses: infracost/infracost-gh-action@v0.10
      with:
        api_key: ${{ secrets.INFRACOST_API_KEY }}
        
    - name: Generate Infracost Report (Dev)
      run: |
        infracost breakdown --path=environments/dev \
          --format=json --out-file=infracost-dev.json
        infracost comment github --path=infracost-dev.json \
          --repo=${{ github.repository }} \
          --github-token=${{ secrets.GITHUB_TOKEN }} \
          --pull-request=${{ github.event.pull_request.number }} \
          --behavior=update
          
    - name: Generate Infracost Report (Staging)
      run: |
        infracost breakdown --path=environments/staging \
          --format=json --out-file=infracost-staging.json
        infracost comment github --path=infracost-staging.json \
          --repo=${{ github.repository }} \
          --github-token=${{ secrets.GITHUB_TOKEN }} \
          --pull-request=${{ github.event.pull_request.number }} \
          --behavior=update
          
    - name: Generate Infracost Report (Production)
      run: |
        infracost breakdown --path=environments/production \
          --format=json --out-file=infracost-prod.json
        infracost comment github --path=infracost-prod.json \
          --repo=${{ github.repository }} \
          --github-token=${{ secrets.GITHUB_TOKEN }} \
          --pull-request=${{ github.event.pull_request.number }} \
          --behavior=update

  # =============================================================================
  # COMPLIANCE TESTING JOB
  # =============================================================================
  compliance-test:
    name: Compliance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Install terraform-compliance
      run: |
        pip install terraform-compliance
        
    - name: Run Compliance Tests (Dev)
      run: |
        terraform-compliance -f tests/compliance/ -p environments/dev/terraform.tfplan
      working-directory: environments/dev
      
    - name: Run Compliance Tests (Staging)
      run: |
        terraform-compliance -f tests/compliance/ -p environments/staging/terraform.tfplan
      working-directory: environments/staging
      
    - name: Run Compliance Tests (Production)
      run: |
        terraform-compliance -f tests/compliance/ -p environments/production/terraform.tfplan
      working-directory: environments/production

  # =============================================================================
  # INTEGRATION TESTING JOB
  # =============================================================================
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create Test Environment
      run: |
        ENV_NAME="test-${{ github.event.pull_request.number }}-${{ github.sha }}"
        echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
        
    - name: Terraform Init
      run: terraform init
      working-directory: environments/dev
      
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve \
          -var="environment=${{ env.ENV_NAME }}" \
          -var="pr_number=${{ github.event.pull_request.number }}"
      working-directory: environments/dev
      
    - name: Run Integration Tests
      run: |
        KONG_URL=$(terraform output -raw kong_proxy_url)
        ./scripts/test-integration.sh "$KONG_URL"
      working-directory: environments/dev
      
    - name: Terraform Destroy
      if: always()
      run: |
        terraform destroy -auto-approve \
          -var="environment=${{ env.ENV_NAME }}" \
          -var="pr_number=${{ github.event.pull_request.number }}"
      working-directory: environments/dev

  # =============================================================================
  # TEST SUMMARY JOB
  # =============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, linting, security-scan, cost-estimation, compliance-test, integration-test]
    if: always()
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Generate Test Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Static Analysis | ${{ needs.static-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Linting | ${{ needs.linting.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cost Estimation | ${{ needs.cost-estimation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Compliance Test | ${{ needs.compliance-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Test | ${{ needs.integration-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ needs.static-analysis.result == 'success' && needs.linting.result == 'success' && needs.security-scan.result == 'success' && '✅ All Tests Passed' || '❌ Some Tests Failed' }}" >> $GITHUB_STEP_SUMMARY
